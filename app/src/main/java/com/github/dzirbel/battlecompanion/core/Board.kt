package com.github.dzirbel.battlecompanion.core

import kotlin.random.Random

/**
 * Represents the state of the combat board at a specific time, which simply contains the
 *  [attackers] and [defenders].
 * Note that since [Army] is immutable, [Board] is as well.
 *
 * TODO listener system
 * TODO validity check (maybe only used in tests?) that land units aren't against sea units, etc
 *      also: bombarding destroyers only with development, no attacking aa guns, only one defending
 *            aa gun, no defending bombarding ships, attackers.isAttacking is true and
 *            defenders.isAttacking is false
 */
data class Board(
    val attackers: Army,
    val defenders: Army
) {

    /**
     * The outcome of the combat on this [Board], or null if the battle is not decided (i.e. there
     *  are still units on both sides).
     */
    val outcome: Outcome? by lazy {
        when {
            attackers.units.isEmpty() && defenders.units.isEmpty() -> Outcome.Tie
            attackers.units.isEmpty() && defenders.units.isNotEmpty() ->
                Outcome.DefenderWon(defenders)
            attackers.units.isNotEmpty() && defenders.units.isEmpty() ->
                Outcome.AttackerWon(attackers)
            else -> null
        }
    }

    /**
     * Conducts a round of combat (including both opening and regular fire) based on the rolls
     *  generated by the given [Random] and returns a [Board] with the result.
     */
    fun roll(rand: Random): Board {
        val attackerOpeningFire = attackers.rollHits(
            rand = rand,
            enemies = defenders,
            isOpeningFire = true
        )
        val defenderOpeningFire = defenders.rollHits(
            rand = rand,
            enemies = attackers,
            isOpeningFire = true
        )

        val remainingAttackers = attackers.takeHits(defenderOpeningFire)
        val remainingDefenders = defenders.takeHits(attackerOpeningFire)

        val attackerHits = remainingAttackers.rollHits(
            rand = rand,
            enemies = remainingDefenders,
            isOpeningFire = false
        )
        val defenderHits = remainingDefenders.rollHits(
            rand = rand,
            enemies = remainingAttackers,
            isOpeningFire = false
        )

        return Board(
            attackers = remainingAttackers.takeHits(defenderHits).withoutFirstRoundOnlyUnits(),
            defenders = remainingDefenders.takeHits(attackerHits).withoutFirstRoundOnlyUnits()
        )
    }
}
