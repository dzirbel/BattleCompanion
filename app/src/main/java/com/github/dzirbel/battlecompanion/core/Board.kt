package com.github.dzirbel.battlecompanion.core

import kotlin.random.Random

/**
 * Represents the state of the combat board at a specific time, which simply contains the [attackers] and [defenders].
 * Note that since [Army] is immutable, [Board] is as well.
 * TODO submarine submerging
 * TODO attackers retreating
 * TODO listener system
 */
data class Board(
    val attackers: Army,
    val defenders: Army
) {

    /**
     * Gets the outcome of the combat on this [Board], or null if the battle is not decided.
     */
    fun getOutcome(): Outcome? {
        return when {
            attackers.isEmpty() && defenders.isEmpty() -> Outcome.Tie
            attackers.isEmpty() && !defenders.isEmpty() -> Outcome.DefenderWon(defenders)
            !attackers.isEmpty() && defenders.isEmpty() -> Outcome.AttackerWon(attackers)
            else -> null
        }
    }

    /**
     * Determines whether this [Board] is undergoing an amphibious assault, which is currently true when the [attackers]
     *  have a [UnitType.BATTLESHIP] and the [defenders] have any land units.
     * TODO think this through - BOMBARDING_BATTLESHIP special unit, etc?
     */
    fun isAmphibiousAssault(): Boolean {
        return attackers.units.any { it.key == UnitType.BATTLESHIP } &&
                defenders.units.any { it.key.domain == Domain.LAND }
    }

    /**
     * Conducts a round of combat based on the rolls generated by the given [Random] and returns a [Board] with the
     *  result.
     */
    fun roll(rand: Random): Board {
        var remainingAttackers = attackers
        var remainingDefenders = defenders

        // TODO consider consolidating opening and regular fire into a function

        // TODO bombardment can only hit land units
        val attackerOpeningFireHits = remainingAttackers
            .withOpeningFire(board = this, isAttacking = true)
            .rollHits(rand, isAttacking = true)

        // TODO this technically allows multiple aa guns
        val defenderOpeningFireHits = remainingDefenders
            .withOpeningFire(board = this, isAttacking = false)
            .rollHits(rand, isAttacking = false)

        remainingAttackers = remainingAttackers.takeHits(defenderOpeningFireHits)
        remainingDefenders = remainingDefenders.takeHits(attackerOpeningFireHits)

        // remove defending antiaircraft guns and bombarding battleships after opening fire
        remainingDefenders = remainingDefenders.withoutType(UnitType.ANTIAIRCRAFT_GUN)
        if (isAmphibiousAssault()) {
            remainingAttackers = remainingAttackers.withoutType(UnitType.BATTLESHIP)
        }

        val attackerHits = remainingAttackers
            .withoutOpeningFire(board = this, isAttacking = true)
            .rollHits(rand, isAttacking = true)

        val defenderHits = remainingDefenders
            .withoutOpeningFire(board = this, isAttacking = false)
            .rollHits(rand, isAttacking = false)

        remainingAttackers = remainingAttackers.takeHits(defenderHits)
        remainingDefenders = remainingDefenders.takeHits(attackerHits)

        return Board(
            attackers = remainingAttackers,
            defenders = remainingDefenders
        )
    }
}
